apply plugin: 'com.android.application'

android {

    compileSdkVersion cfg.compileSdkVersion
    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // 表明按照哪些维度进行打包，默认情况下有buildType：debug和release。另外，还可以按照渠道号，品牌等。
        // 在productFlavors中需要指定对应的维度
        flavorDimensions "channel"
    }

    //签名信息
    signingConfigs {
        debug {
            storeFile file('./debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            keyAlias 'ysx_signed'
            keyPassword 'TianHua19920628'
            storeFile file('./ysx_signed.jks')
            storePassword 'TianHua19920628'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false  //不启用Proguard混淆
            shrinkResources false //是否清理无用资源,依赖于minifyEnabled
            zipAlignEnabled false //是否启用zipAlign压缩
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true //是否清理无用资源,依赖于minifyEnabled
            zipAlignEnabled true //是否启用zipAlign压缩
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
        }
    }
    productFlavors {
        Dangbei {
            dimension "channel"
            manifestPlaceholders = [TEST_CHANNEL: "Dangbei"]
        }
        Xiaomi {
            dimension "channel"
            manifestPlaceholders = [TEST_CHANNEL: "Xiaomi"]
        }
        Pptv {
            dimension "channel"
            manifestPlaceholders = [TEST_CHANNEL: "Pptv"]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName = "${variant.buildType.name}_${variant.flavorName}_${defaultConfig.versionName}_${getTime()}.apk"
            outputFileName = fileName
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //源代码依赖库 start
    implementation project(':mylibrary')
    //源代码依赖库 end

    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libs.espressoVersion}"
    testImplementation "junit:junit:${libs.junitVersion}"

    implementation "com.android.support.constraint:constraint-layout:${libs.constraintVersion}"

    //support start
    implementation "com.android.support:appcompat-v7:${libs.supportVersion}"
    implementation "com.android.support:design:${libs.supportVersion}"
    implementation "com.android.support:recyclerview-v7:${libs.supportVersion}"
    implementation "com.android.support:support-v4:${libs.supportVersion}"

    //support end

    //第三方库 start

    implementation "com.jakewharton:butterknife:${libs.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterknife}"

    implementation "com.shizhefei:HVScrollView:${libs.HVScrollView}"

    implementation "com.acker:simplezxing:${libs.simplezxing}"
    implementation "pub.devrel:easypermissions:${libs.easypermissions}"
    implementation "net.gotev:uploadservice-ftp:${libs.uploadservice}"
    implementation "com.jude:easyrecyclerview:${libs.easyrecyclerview}"
    implementation "com.github.bumptech.glide:glide:${libs.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${libs.glide}"
    implementation "com.android.volley:volley:${libs.volley}"
    implementation "com.google.code.gson:gson:${libs.gson}"
    // SmartRefreshLayout https://github.com/scwang90/SmartRefreshLayout
    implementation "com.scwang.smartrefresh:SmartRefreshLayout:${libs.SmartRefreshLayout}"

    //第三方库 end
}

def static getTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getDefault())
}




